generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReactionType {
  LIKE
  DISLIKE
  PARTY
  CLAP
  HEART
  FIRE
  SAD
}

enum Status {
  DRAFT
  PLANNED
  PUBLISHED
}

model Project {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  name             String
  link             String
  shortDescription String?
}

model Post {
  id                   String    @id @default(cuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  title                String
  slug                 String    @unique
  tags                 String[]
  shortDescription     String?
  repositoryLink       String?
  status               Status    @default(DRAFT)
  thumbnail            Boolean   @default(false)
  thumbnailDescription String?
  Comment              Comment[]
  info                 String?
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  body String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // thumbsUpCount   Int @default(0)
  // thumbsDownCount Int @default(0)
  // partyCount      Int @default(0)
  // clapCount       Int @default(0)
  // heartCount      Int @default(0)
  // fireCount       Int @default(0)
  // sadCount        Int @default(0)

  Reactions Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type ReactionType

  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Comments      Comment[]
  Reactions     Reaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
