generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReactionType {
  LIKE
  DISLIKE
  PARTY
  CLAP
  HEART
  FIRE
  SAD
}

enum Status {
  DRAFT
  PLANNED
  PUBLISHED
  HIDDEN
}

model Project {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  name             String
  link             String
  shortDescription String?
}

model Post {
  id                   String    @id @default(cuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  title                String
  slug                 String    @unique
  tags                 String[]
  shortDescription     String?
  repositoryLink       String?
  status               Status    @default(DRAFT)
  thumbnail            Boolean   @default(false)
  thumbnailDescription String?
  Comment              Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  body String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  Reactions Reaction[]
  User      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}

model Reaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type ReactionType

  Comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  User      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}

model User {
  id       String  @id @unique
  username String?
  email    String?
  image    String?

  comments     Comment[]
  reactions    Reaction[]
  auth_session Session[]
  key          Key[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}
